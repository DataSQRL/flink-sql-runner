name: Delete GHCR image on PR close

on:
  pull_request:
    types: [closed]

jobs:
  delete-ghcr:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        FLINK_PROFILE: [flink-1.19, flink-1.20]

    steps:
      - name: Delete GHCR image via GitHub GraphQL API
        env:
          GH_USERNAME: ${{ secrets.PAT_USERNAME }}
          GH_PASSWORD: ${{ secrets.PAT_PASSWORD }}
        run: |
          set -euxo pipefail

          OWNER="datasqrl"
          PACKAGE_NAME="flink-sql-runner"
          TAG="pr-${{ github.event.number }}-${{ matrix.FLINK_PROFILE }}"

          echo "üîê Authenticating and generating bearer token for GitHub GraphQL API..."

          # Get GitHub API token using basic auth
          BEARER_TOKEN=$(curl -s -u "$GH_USERNAME:$GH_PASSWORD" \
            -H "Content-Type: application/json" \
            -d '{"scopes":["read:packages", "delete:packages"],"note":"Delete GHCR action"}' \
            https://api.github.com/authorizations | jq -r '.token')

          if [[ -z "$BEARER_TOKEN" || "$BEARER_TOKEN" == "null" ]]; then
            echo "‚ùå Failed to acquire bearer token."
            exit 1
          fi

          echo "üîç Searching for GHCR package version with tag: $TAG"

          QUERY=$(jq -nc --arg owner "$OWNER" --arg name "$PACKAGE_NAME" '
          {
            query: "query($owner:String!, $name:String!) {
              repository(owner: $owner, name: $name) {
                packages(first: 50, packageType: CONTAINER, names: [\"flink-sql-runner\"]) {
                  nodes {
                    name
                    versions(first: 100) {
                      nodes {
                        id
                        version
                        tags
                      }
                    }
                  }
                }
              }
            }",
            variables: {
              owner: $owner,
              name: $name
            }
          }')

          RESPONSE=$(curl -s \
            -H "Authorization: Bearer $BEARER_TOKEN" \
            -H "Content-Type: application/json" \
            -H "Accept: application/vnd.github.package-deletes-preview+json" \
            -d "$QUERY" https://api.github.com/graphql)

          echo "GraphQL query result:"
          echo "$RESPONSE" | jq

          PACKAGE_VERSION_ID=$(echo "$RESPONSE" | jq -r \
            --arg TAG "$TAG" \
            '.data.repository.packages.nodes[].versions.nodes[] 
              | select(.tags[]? == $TAG) 
              | .id')

          if [[ -z "$PACKAGE_VERSION_ID" || "$PACKAGE_VERSION_ID" == "null" ]]; then
            echo "‚ùå No matching package version found for tag $TAG"
            exit 1
          fi

          echo "‚úÖ Found package version ID: $PACKAGE_VERSION_ID"

          DELETE_MUTATION=$(jq -nc --arg id "$PACKAGE_VERSION_ID" '
          {
            query: "mutation($id: ID!) {
              deletePackageVersion(input: {packageVersionId: $id}) {
                success
              }
            }",
            variables: { id: $id }
          }')

          DELETE_RESPONSE=$(curl -s \
            -H "Authorization: Bearer $BEARER_TOKEN" \
            -H "Content-Type: application/json" \
            -H "Accept: application/vnd.github.package-deletes-preview+json" \
            -d "$DELETE_MUTATION" https://api.github.com/graphql)

          echo "Delete mutation result:"
          echo "$DELETE_RESPONSE" | jq

          SUCCESS=$(echo "$DELETE_RESPONSE" | jq -r '.data.deletePackageVersion.success')

          if [[ "$SUCCESS" == "true" ]]; then
            echo "‚úÖ Successfully deleted image with tag $TAG"
          else
            echo "‚ùå Failed to delete image with tag $TAG"
            exit 1
          fi
