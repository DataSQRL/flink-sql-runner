name: Delete GHCR image on PR close

on:
  pull_request:
    types: [closed]

jobs:
  delete-ghcr:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        FLINK_PROFILE: [flink-1.19, flink-1.20]

    steps:
      - name: Delete GHCR image
        run: |
          set -euxo pipefail

          REPO="datasqrl/flink-sql-runner"
          TAG="pr-${{ github.event.number }}-${{ matrix.FLINK_PROFILE }}"
          IMAGE="ghcr.io/$REPO:$TAG"

          echo "Attempting to delete image: $IMAGE"

          TOKEN_BASE64="$(echo -n "${{ secrets.PAT_USERNAME }}:${{ secrets.PAT_PASSWORD }}" | base64)"

          RAW_RESPONSE=$(curl -sD - \
            -H "Authorization: Basic $TOKEN_BASE64" \
            -H "Accept: application/vnd.docker.distribution.manifest.list.v2+json,application/vnd.docker.distribution.manifest.v2+json" \
            "https://ghcr.io/v2/$REPO/manifests/$TAG")

          # Immediately check HTTP status
          STATUS_CODE=$(echo "$RAW_RESPONSE" | grep HTTP | awk '{print $2}' | tr -d $'\r')

          if [[ "$STATUS_CODE" -eq 401 ]]; then
            echo "ERROR: Unauthorized (401). Check your PAT credentials or GHCR permissions."
            exit 1
          elif [[ "$STATUS_CODE" -eq 404 ]]; then
            echo "ERROR: Image not found (404). Check your image name or tag."
            exit 1
          elif [[ "$STATUS_CODE" -ge 400 ]]; then
            echo "ERROR: Unexpected error occurred. HTTP status: $STATUS_CODE"
            exit 1
          fi

          HEADERS=$(echo "$RAW_RESPONSE" | sed -n '/^HTTP/,$p' | sed '/^$/q')
          DIGEST=$(echo "$HEADERS" | awk '/docker-content-digest:/ { print $2 }' | tr -d $'\r')

          if [[ -z "$DIGEST" ]]; then
            echo "ERROR: No digest found. Response headers were:"
            echo "$HEADERS"
            exit 1
          fi

          echo "Found digest: $DIGEST"

          DELETE_STATUS=$(curl -s -o /dev/null -w "%{http_code}" \
            -X DELETE \
            -H "Authorization: Basic $TOKEN_BASE64" \
            "https://ghcr.io/v2/$REPO/manifests/$DIGEST")

          if [[ "$DELETE_STATUS" -ge 200 && "$DELETE_STATUS" -lt 300 ]]; then
            echo "Image deleted successfully (HTTP $DELETE_STATUS)."
          else
            echo "ERROR: Failed to delete image. HTTP status $DELETE_STATUS"
            exit 1
          fi
