{
  "flinkVersion" : "1.17",
  "nodes" : [ {
    "id" : 1,
    "type" : "stream-exec-table-source-scan_1",
    "scanTableSource" : {
      "table" : {
        "identifier" : "`default_catalog`.`default_database`.`_transaction_1`",
        "resolvedTable" : {
          "schema" : {
            "columns" : [ {
              "name" : "transactionId",
              "dataType" : "BIGINT NOT NULL"
            }, {
              "name" : "cardNo",
              "dataType" : "DOUBLE NOT NULL"
            }, {
              "name" : "time",
              "dataType" : {
                "type" : "TIMESTAMP_WITH_LOCAL_TIME_ZONE",
                "nullable" : false,
                "precision" : 3,
                "kind" : "ROWTIME"
              }
            }, {
              "name" : "amount",
              "dataType" : "DOUBLE NOT NULL"
            }, {
              "name" : "merchantId",
              "dataType" : "BIGINT NOT NULL"
            } ],
            "watermarkSpecs" : [ {
              "rowtimeAttribute" : "time",
              "expression" : {
                "rexNode" : {
                  "kind" : "CALL",
                  "syntax" : "BINARY",
                  "internalName" : "$-$1",
                  "operands" : [ {
                    "kind" : "INPUT_REF",
                    "inputIndex" : 2,
                    "type" : "TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL"
                  }, {
                    "kind" : "LITERAL",
                    "value" : "1000",
                    "type" : "INTERVAL SECOND(6) NOT NULL"
                  } ],
                  "type" : "TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL"
                },
                "serializableString" : "`time` - INTERVAL '1.0' SECOND"
              }
            } ],
            "primaryKey" : {
              "name" : "PK_transactionId_time",
              "type" : "PRIMARY_KEY",
              "columns" : [ "transactionId", "time" ]
            }
          },
          "partitionKeys" : [ ],
          "options" : {
            "connector" : "datagen"
          }
        }
      }
    },
    "outputType" : "ROW<`transactionId` BIGINT NOT NULL, `cardNo` DOUBLE NOT NULL, `time` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL, `amount` DOUBLE NOT NULL, `merchantId` BIGINT NOT NULL>",
    "description" : "TableSourceScan(table=[[default_catalog, default_database, _transaction_1]], fields=[transactionId, cardNo, time, amount, merchantId])",
    "inputProperties" : [ ]
  }, {
    "id" : 2,
    "type" : "stream-exec-watermark-assigner_1",
    "watermarkExpr" : {
      "kind" : "CALL",
      "syntax" : "BINARY",
      "internalName" : "$-$1",
      "operands" : [ {
        "kind" : "INPUT_REF",
        "inputIndex" : 2,
        "type" : "TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL"
      }, {
        "kind" : "LITERAL",
        "value" : "1000",
        "type" : "INTERVAL SECOND(6) NOT NULL"
      } ],
      "type" : "TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL"
    },
    "rowtimeFieldIndex" : 2,
    "inputProperties" : [ {
      "requiredDistribution" : {
        "type" : "UNKNOWN"
      },
      "damBehavior" : "PIPELINED",
      "priority" : 0
    } ],
    "outputType" : {
      "type" : "ROW",
      "fields" : [ {
        "name" : "transactionId",
        "fieldType" : "BIGINT NOT NULL"
      }, {
        "name" : "cardNo",
        "fieldType" : "DOUBLE NOT NULL"
      }, {
        "name" : "time",
        "fieldType" : {
          "type" : "TIMESTAMP_WITH_LOCAL_TIME_ZONE",
          "nullable" : false,
          "precision" : 3,
          "kind" : "ROWTIME"
        }
      }, {
        "name" : "amount",
        "fieldType" : "DOUBLE NOT NULL"
      }, {
        "name" : "merchantId",
        "fieldType" : "BIGINT NOT NULL"
      } ]
    },
    "description" : "WatermarkAssigner(rowtime=[time], watermark=[(time - 1000:INTERVAL SECOND)])"
  }, {
    "id" : 3,
    "type" : "stream-exec-calc_1",
    "projection" : [ {
      "kind" : "INPUT_REF",
      "inputIndex" : 4,
      "type" : "BIGINT NOT NULL"
    }, {
      "kind" : "INPUT_REF",
      "inputIndex" : 3,
      "type" : "DOUBLE NOT NULL"
    }, {
      "kind" : "CALL",
      "syntax" : "SPECIAL",
      "internalName" : "$CAST$1",
      "operands" : [ {
        "kind" : "INPUT_REF",
        "inputIndex" : 2,
        "type" : {
          "type" : "TIMESTAMP_WITH_LOCAL_TIME_ZONE",
          "nullable" : false,
          "precision" : 3,
          "kind" : "ROWTIME"
        }
      } ],
      "type" : "TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL"
    } ],
    "condition" : null,
    "inputProperties" : [ {
      "requiredDistribution" : {
        "type" : "UNKNOWN"
      },
      "damBehavior" : "PIPELINED",
      "priority" : 0
    } ],
    "outputType" : "ROW<`merchantId` BIGINT NOT NULL, `amount` DOUBLE NOT NULL, `time` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL>",
    "description" : "Calc(select=[merchantId, amount, CAST(time AS TIMESTAMP_WITH_LOCAL_TIME_ZONE(3)) AS time])"
  }, {
    "id" : 4,
    "type" : "stream-exec-exchange_1",
    "inputProperties" : [ {
      "requiredDistribution" : {
        "type" : "HASH",
        "keys" : [ 0 ]
      },
      "damBehavior" : "PIPELINED",
      "priority" : 0
    } ],
    "outputType" : "ROW<`merchantId` BIGINT NOT NULL, `amount` DOUBLE NOT NULL, `time` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL>",
    "description" : "Exchange(distribution=[hash[merchantId]])"
  }, {
    "id" : 5,
    "type" : "stream-exec-group-aggregate_1",
    "configuration" : {
      "table.exec.mini-batch.enabled" : "false",
      "table.exec.mini-batch.size" : "-1"
    },
    "grouping" : [ 0 ],
    "aggCalls" : [ {
      "name" : null,
      "internalName" : "$SUM$1",
      "argList" : [ 1 ],
      "filterArg" : -1,
      "distinct" : false,
      "approximate" : false,
      "ignoreNulls" : false,
      "type" : "DOUBLE NOT NULL"
    }, {
      "name" : "max_amount",
      "internalName" : "$MAX$1",
      "argList" : [ 1 ],
      "filterArg" : -1,
      "distinct" : false,
      "approximate" : false,
      "ignoreNulls" : false,
      "type" : "DOUBLE NOT NULL"
    }, {
      "name" : "__timestamp",
      "internalName" : "$MAX$1",
      "argList" : [ 2 ],
      "filterArg" : -1,
      "distinct" : false,
      "approximate" : false,
      "ignoreNulls" : false,
      "type" : "TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL"
    } ],
    "aggCallNeedRetractions" : [ false, false, false ],
    "generateUpdateBefore" : false,
    "needRetraction" : false,
    "state" : [ {
      "index" : 0,
      "ttl" : "0 ms",
      "name" : "groupAggregateState"
    } ],
    "inputProperties" : [ {
      "requiredDistribution" : {
        "type" : "UNKNOWN"
      },
      "damBehavior" : "PIPELINED",
      "priority" : 0
    } ],
    "outputType" : "ROW<`merchantId` BIGINT NOT NULL, `$f1` DOUBLE NOT NULL, `max_amount` DOUBLE NOT NULL, `__timestamp` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL>",
    "description" : "GroupAggregate(groupBy=[merchantId], select=[merchantId, SUM(amount) AS $f1, MAX(amount) AS max_amount, MAX(time) AS __timestamp])"
  }, {
    "id" : 6,
    "type" : "stream-exec-calc_1",
    "projection" : [ {
      "kind" : "INPUT_REF",
      "inputIndex" : 0,
      "type" : "BIGINT NOT NULL"
    }, {
      "kind" : "CALL",
      "syntax" : "BINARY",
      "internalName" : "$*$1",
      "operands" : [ {
        "kind" : "INPUT_REF",
        "inputIndex" : 1,
        "type" : "DOUBLE NOT NULL"
      }, {
        "kind" : "LITERAL",
        "value" : 2,
        "type" : "INT NOT NULL"
      } ],
      "type" : "DOUBLE NOT NULL"
    }, {
      "kind" : "INPUT_REF",
      "inputIndex" : 2,
      "type" : "DOUBLE NOT NULL"
    }, {
      "kind" : "INPUT_REF",
      "inputIndex" : 3,
      "type" : "TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL"
    } ],
    "condition" : null,
    "inputProperties" : [ {
      "requiredDistribution" : {
        "type" : "UNKNOWN"
      },
      "damBehavior" : "PIPELINED",
      "priority" : 0
    } ],
    "outputType" : "ROW<`merchantId` BIGINT NOT NULL, `double_ta` DOUBLE NOT NULL, `max_amount` DOUBLE NOT NULL, `__timestamp` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL>",
    "description" : "Calc(select=[merchantId, ($f1 * 2) AS double_ta, max_amount, __timestamp])"
  }, {
    "id" : 7,
    "type" : "stream-exec-sink_1",
    "configuration" : {
      "table.exec.sink.keyed-shuffle" : "AUTO",
      "table.exec.sink.not-null-enforcer" : "ERROR",
      "table.exec.sink.rowtime-inserter" : "ENABLED",
      "table.exec.sink.type-length-enforcer" : "IGNORE",
      "table.exec.sink.upsert-materialize" : "AUTO"
    },
    "dynamicTableSink" : {
      "table" : {
        "identifier" : "`default_catalog`.`default_database`.`transactionbymerchant_1`",
        "resolvedTable" : {
          "schema" : {
            "columns" : [ {
              "name" : "merchantId",
              "dataType" : "BIGINT NOT NULL"
            }, {
              "name" : "double_ta",
              "dataType" : "DOUBLE NOT NULL"
            }, {
              "name" : "max_amount",
              "dataType" : "DOUBLE NOT NULL"
            }, {
              "name" : "__timestamp",
              "dataType" : "TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL"
            } ],
            "watermarkSpecs" : [ ],
            "primaryKey" : {
              "name" : "PK_merchantId",
              "type" : "PRIMARY_KEY",
              "columns" : [ "merchantId" ]
            }
          },
          "partitionKeys" : [ ],
          "options" : {
            "connector" : "blackhole"
          }
        }
      }
    },
    "inputChangelogMode" : [ "INSERT", "UPDATE_AFTER" ],
    "inputUpsertKey" : [ 0 ],
    "inputProperties" : [ {
      "requiredDistribution" : {
        "type" : "UNKNOWN"
      },
      "damBehavior" : "PIPELINED",
      "priority" : 0
    } ],
    "outputType" : "ROW<`merchantId` BIGINT NOT NULL, `double_ta` DOUBLE NOT NULL, `max_amount` DOUBLE NOT NULL, `__timestamp` TIMESTAMP(3) WITH LOCAL TIME ZONE NOT NULL>",
    "description" : "Sink(table=[default_catalog.default_database.transactionbymerchant_1], fields=[merchantId, double_ta, max_amount, __timestamp])"
  }, {
    "id" : 8,
    "type" : "stream-exec-calc_1",
    "projection" : [ {
      "kind" : "INPUT_REF",
      "inputIndex" : 4,
      "type" : "BIGINT NOT NULL"
    }, {
      "kind" : "INPUT_REF",
      "inputIndex" : 3,
      "type" : "DOUBLE NOT NULL"
    } ],
    "condition" : null,
    "inputProperties" : [ {
      "requiredDistribution" : {
        "type" : "UNKNOWN"
      },
      "damBehavior" : "PIPELINED",
      "priority" : 0
    } ],
    "outputType" : "ROW<`merchantId` BIGINT NOT NULL, `amount` DOUBLE NOT NULL>",
    "description" : "Calc(select=[merchantId, amount])"
  }, {
    "id" : 9,
    "type" : "stream-exec-exchange_1",
    "inputProperties" : [ {
      "requiredDistribution" : {
        "type" : "HASH",
        "keys" : [ 0 ]
      },
      "damBehavior" : "PIPELINED",
      "priority" : 0
    } ],
    "outputType" : "ROW<`merchantId` BIGINT NOT NULL, `amount` DOUBLE NOT NULL>",
    "description" : "Exchange(distribution=[hash[merchantId]])"
  }, {
    "id" : 10,
    "type" : "stream-exec-group-aggregate_1",
    "configuration" : {
      "table.exec.mini-batch.enabled" : "false",
      "table.exec.mini-batch.size" : "-1"
    },
    "grouping" : [ 0 ],
    "aggCalls" : [ {
      "name" : null,
      "internalName" : "$SUM$1",
      "argList" : [ 1 ],
      "filterArg" : -1,
      "distinct" : false,
      "approximate" : false,
      "ignoreNulls" : false,
      "type" : "DOUBLE NOT NULL"
    }, {
      "name" : "max_amount",
      "internalName" : "$MAX$1",
      "argList" : [ 1 ],
      "filterArg" : -1,
      "distinct" : false,
      "approximate" : false,
      "ignoreNulls" : false,
      "type" : "DOUBLE NOT NULL"
    } ],
    "aggCallNeedRetractions" : [ false, false ],
    "generateUpdateBefore" : false,
    "needRetraction" : false,
    "state" : [ {
      "index" : 0,
      "ttl" : "0 ms",
      "name" : "groupAggregateState"
    } ],
    "inputProperties" : [ {
      "requiredDistribution" : {
        "type" : "UNKNOWN"
      },
      "damBehavior" : "PIPELINED",
      "priority" : 0
    } ],
    "outputType" : "ROW<`merchantId` BIGINT NOT NULL, `$f1` DOUBLE NOT NULL, `max_amount` DOUBLE NOT NULL>",
    "description" : "GroupAggregate(groupBy=[merchantId], select=[merchantId, SUM(amount) AS $f1, MAX(amount) AS max_amount])"
  }, {
    "id" : 11,
    "type" : "stream-exec-calc_1",
    "projection" : [ {
      "kind" : "INPUT_REF",
      "inputIndex" : 0,
      "type" : "BIGINT NOT NULL"
    }, {
      "kind" : "CALL",
      "syntax" : "BINARY",
      "internalName" : "$*$1",
      "operands" : [ {
        "kind" : "INPUT_REF",
        "inputIndex" : 1,
        "type" : "DOUBLE NOT NULL"
      }, {
        "kind" : "LITERAL",
        "value" : 2,
        "type" : "INT NOT NULL"
      } ],
      "type" : "DOUBLE NOT NULL"
    }, {
      "kind" : "INPUT_REF",
      "inputIndex" : 2,
      "type" : "DOUBLE NOT NULL"
    } ],
    "condition" : null,
    "inputProperties" : [ {
      "requiredDistribution" : {
        "type" : "UNKNOWN"
      },
      "damBehavior" : "PIPELINED",
      "priority" : 0
    } ],
    "outputType" : "ROW<`merchantId` BIGINT NOT NULL, `double_ta` DOUBLE NOT NULL, `max_amount` DOUBLE NOT NULL>",
    "description" : "Calc(select=[merchantId, ($f1 * 2) AS double_ta, max_amount])"
  }, {
    "id" : 12,
    "type" : "stream-exec-sink_1",
    "configuration" : {
      "table.exec.sink.keyed-shuffle" : "AUTO",
      "table.exec.sink.not-null-enforcer" : "ERROR",
      "table.exec.sink.rowtime-inserter" : "ENABLED",
      "table.exec.sink.type-length-enforcer" : "IGNORE",
      "table.exec.sink.upsert-materialize" : "AUTO"
    },
    "dynamicTableSink" : {
      "table" : {
        "identifier" : "`default_catalog`.`default_database`.`transactionbymerchant_1_1`",
        "resolvedTable" : {
          "schema" : {
            "columns" : [ {
              "name" : "merchantId",
              "dataType" : "BIGINT NOT NULL"
            }, {
              "name" : "double_ta",
              "dataType" : "DOUBLE NOT NULL"
            }, {
              "name" : "max_amount",
              "dataType" : "DOUBLE NOT NULL"
            } ],
            "watermarkSpecs" : [ ]
          },
          "partitionKeys" : [ ],
          "options" : {
            "connector" : "blackhole"
          }
        }
      }
    },
    "inputChangelogMode" : [ "INSERT", "UPDATE_AFTER" ],
    "inputUpsertKey" : [ 0 ],
    "inputProperties" : [ {
      "requiredDistribution" : {
        "type" : "UNKNOWN"
      },
      "damBehavior" : "PIPELINED",
      "priority" : 0
    } ],
    "outputType" : "ROW<`merchantId` BIGINT NOT NULL, `double_ta` DOUBLE NOT NULL, `max_amount` DOUBLE NOT NULL>",
    "description" : "Sink(table=[default_catalog.default_database.transactionbymerchant_1_1], fields=[merchantId, double_ta, max_amount])"
  } ],
  "edges" : [ {
    "source" : 1,
    "target" : 2,
    "shuffle" : {
      "type" : "FORWARD"
    },
    "shuffleMode" : "PIPELINED"
  }, {
    "source" : 2,
    "target" : 3,
    "shuffle" : {
      "type" : "FORWARD"
    },
    "shuffleMode" : "PIPELINED"
  }, {
    "source" : 3,
    "target" : 4,
    "shuffle" : {
      "type" : "FORWARD"
    },
    "shuffleMode" : "PIPELINED"
  }, {
    "source" : 4,
    "target" : 5,
    "shuffle" : {
      "type" : "FORWARD"
    },
    "shuffleMode" : "PIPELINED"
  }, {
    "source" : 5,
    "target" : 6,
    "shuffle" : {
      "type" : "FORWARD"
    },
    "shuffleMode" : "PIPELINED"
  }, {
    "source" : 6,
    "target" : 7,
    "shuffle" : {
      "type" : "FORWARD"
    },
    "shuffleMode" : "PIPELINED"
  }, {
    "source" : 2,
    "target" : 8,
    "shuffle" : {
      "type" : "FORWARD"
    },
    "shuffleMode" : "PIPELINED"
  }, {
    "source" : 8,
    "target" : 9,
    "shuffle" : {
      "type" : "FORWARD"
    },
    "shuffleMode" : "PIPELINED"
  }, {
    "source" : 9,
    "target" : 10,
    "shuffle" : {
      "type" : "FORWARD"
    },
    "shuffleMode" : "PIPELINED"
  }, {
    "source" : 10,
    "target" : 11,
    "shuffle" : {
      "type" : "FORWARD"
    },
    "shuffleMode" : "PIPELINED"
  }, {
    "source" : 11,
    "target" : 12,
    "shuffle" : {
      "type" : "FORWARD"
    },
    "shuffleMode" : "PIPELINED"
  } ]
}