<?xml version="1.0" encoding="UTF-8"?>
<!--

    Copyright Â© 2024 DataSQRL (contact@datasqrl.com)

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

-->
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">

  <modelVersion>4.0.0</modelVersion>

  <parent>
    <groupId>com.datasqrl.flinkrunner</groupId>
    <artifactId>flink-sql-runner-parent</artifactId>
    <version>1.0.0-SNAPSHOT</version>
  </parent>

  <artifactId>flink-sql-runner</artifactId>

  <dependencies>
    <dependency>
      <groupId>org.apache.flink</groupId>
      <artifactId>flink-streaming-java</artifactId>
      <version>${flink.version}</version>
      <scope>provided</scope>
    </dependency>
    <dependency>
      <groupId>org.apache.flink</groupId>
      <artifactId>flink-table-api-java</artifactId>
      <version>${flink.version}</version>
      <scope>provided</scope>
    </dependency>
    <dependency>
      <groupId>org.apache.flink</groupId>
      <artifactId>flink-table-planner_2.12</artifactId>
      <version>${flink.version}</version>
      <scope>provided</scope>
    </dependency>
    <dependency>
      <groupId>org.apache.flink</groupId>
      <artifactId>flink-runtime-web</artifactId>
      <version>${flink.version}</version>
      <scope>test</scope>
    </dependency>

    <!-- Add logging framework, to produce console output when running in the IDE. -->
    <!-- These dependencies are excluded from the application JAR by default. -->
    <dependency>
      <groupId>org.slf4j</groupId>
      <artifactId>slf4j-api</artifactId>
      <scope>provided</scope>
    </dependency>
    <dependency>
      <groupId>org.apache.logging.log4j</groupId>
      <artifactId>log4j-slf4j-impl</artifactId>
      <version>${log4j.version}</version>
      <scope>runtime</scope>
    </dependency>
    <dependency>
      <groupId>org.apache.logging.log4j</groupId>
      <artifactId>log4j-api</artifactId>
      <version>${log4j.version}</version>
      <scope>runtime</scope>
    </dependency>
    <dependency>
      <groupId>org.apache.logging.log4j</groupId>
      <artifactId>log4j-core</artifactId>
      <version>${log4j.version}</version>
      <scope>runtime</scope>
    </dependency>

    <dependency>
      <groupId>info.picocli</groupId>
      <artifactId>picocli</artifactId>
      <version>${picocli.version}</version>
    </dependency>
    <dependency>
      <groupId>org.junit.jupiter</groupId>
      <artifactId>junit-jupiter</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.apache.flink</groupId>
      <artifactId>flink-test-utils</artifactId>
      <version>${flink.version}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.apache.flink</groupId>
      <artifactId>flink-table-api-java-bridge</artifactId>
      <version>${flink.version}</version>
      <scope>provided</scope>
    </dependency>
    <dependency>
      <groupId>org.projectlombok</groupId>
      <artifactId>lombok</artifactId>
      <version>${lombok.version}</version>
      <scope>provided</scope>
    </dependency>

    <dependency>
      <groupId>com.nextbreakpoint</groupId>
      <artifactId>com.nextbreakpoint.flink.client</artifactId>
      <version>1.1.4</version>
      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>org.awaitility</groupId>
      <artifactId>awaitility</artifactId>
      <version>4.3.0</version>
      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>org.apache.commons</groupId>
      <artifactId>commons-exec</artifactId>
      <version>1.4.0</version>
      <scope>test</scope>
    </dependency>

    <!-- JDBI -->
    <dependency>
      <groupId>org.jdbi</groupId>
      <artifactId>jdbi3-core</artifactId>
      <version>3.49.1</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.jdbi</groupId>
      <artifactId>jdbi3-sqlobject</artifactId>
      <version>3.49.1</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.postgresql</groupId>
      <artifactId>postgresql</artifactId>
      <version>${postgres.version}</version>
    </dependency>

    <dependency>
      <groupId>org.apache.flink</groupId>
      <artifactId>flink-connector-kafka</artifactId>
      <version>${kafka.version}</version>
    </dependency>
    <dependency>
      <groupId>org.apache.flink</groupId>
      <artifactId>flink-connector-jdbc</artifactId>
      <version>${jdbc.version}</version>
    </dependency>
    <dependency>
      <groupId>org.apache.flink</groupId>
      <artifactId>flink-avro-confluent-registry</artifactId>
      <version>${flink.version}</version>
    </dependency>
    <dependency>
      <groupId>org.apache.flink</groupId>
      <artifactId>flink-s3-fs-hadoop</artifactId>
      <version>${flink.version}</version>
    </dependency>

    <dependency>
      <groupId>com.datasqrl.flinkrunner</groupId>
      <artifactId>functions-common</artifactId>
      <version>1.0.0-SNAPSHOT</version>
      <scope>provided</scope>
    </dependency>
    <dependency>
      <groupId>com.datasqrl.flinkrunner</groupId>
      <artifactId>udf-sample</artifactId>
      <version>1.0.0-SNAPSHOT</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>com.datasqrl.flinkrunner</groupId>
      <artifactId>system-functions-sample</artifactId>
      <version>1.0.0-SNAPSHOT</version>
      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>org.jacoco</groupId>
      <artifactId>org.jacoco.core</artifactId>
      <version>0.8.13</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.jacoco</groupId>
      <artifactId>org.jacoco.agent</artifactId>
      <version>0.8.13</version>
      <classifier>runtime</classifier>
      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>org.apache.flink</groupId>
      <artifactId>flink-avro</artifactId>
      <version>${flink.version}</version>
      <type>test-jar</type>
      <scope>test</scope>
    </dependency>

    <!-- project dependencies-->
    <dependency>
      <groupId>${project.groupId}</groupId>
      <artifactId>flexible-csv-format</artifactId>
      <version>${project.version}</version>
    </dependency>
    <dependency>
      <groupId>${project.groupId}</groupId>
      <artifactId>flexible-json-format</artifactId>
      <version>${project.version}</version>
    </dependency>
    <dependency>
      <groupId>${project.groupId}</groupId>
      <artifactId>functions-common</artifactId>
      <version>${project.version}</version>
      <scope>runtime</scope>
    </dependency>
    <dependency>
      <groupId>${project.groupId}</groupId>
      <artifactId>json-type</artifactId>
      <version>${project.version}</version>
    </dependency>
    <dependency>
      <groupId>${project.groupId}</groupId>
      <artifactId>vector-type</artifactId>
      <version>${project.version}</version>
    </dependency>
    <dependency>
      <groupId>${project.groupId}</groupId>
      <artifactId>kafka-safe-connector</artifactId>
      <version>${project.version}</version>
    </dependency>
    <dependency>
      <groupId>${project.groupId}</groupId>
      <artifactId>postgresql-connector</artifactId>
      <version>${project.version}</version>
    </dependency>
  </dependencies>

  <build>
    <resources>
      <resource>
        <targetPath>${project.basedir}/target</targetPath>
        <filtering>true</filtering>
        <directory>src/main/docker</directory>
      </resource>
      <resource>
        <directory>src/main/resources</directory>
      </resource>
    </resources>

    <plugins>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-shade-plugin</artifactId>
        <version>3.6.0</version>
        <executions>
          <!-- Run shade goal on package phase -->
          <execution>
            <goals>
              <goal>shade</goal>
            </goals>
            <phase>package</phase>
            <configuration>
              <finalName>flink-sql-runner.uber</finalName>
              <shadedArtifactAttached>true</shadedArtifactAttached>
              <shadedClassifierName>flink${flink.version}</shadedClassifierName>
              <artifactSet>
                <excludes>
                  <exclude>org.apache.flink:flink-shaded-force-shading</exclude>
                  <exclude>com.google.code.findbugs:jsr305</exclude>
                  <exclude>org.slf4j:*</exclude>
                  <exclude>org.apache.logging.log4j:*</exclude>
                </excludes>
              </artifactSet>
              <filters>
                <!-- Exclude original AvroDeserializationSchema, because for now we overwrite that class downstream. -->
                <filter>
                  <artifact>org.apache.flink:flink-avro</artifact>
                  <excludes>
                    <exclude>org/apache/flink/formats/avro/AvroDeserializationSchema**</exclude>
                  </excludes>
                </filter>
                <filter>
                  <artifact>*:*</artifact>
                  <excludes>
                    <!--
  We exclude AutoRegisterSystemFunction from the shaded JAR because this class
  is loaded via ServiceLoader from the Flink classpath (/opt/flink/lib), not the job JAR.
  Including it here would result in a NoClassDefFoundError due to Flink's classloader isolation.

  A separate 'service' JAR is built (see maven-jar-plugin) that contains only this interface,
  and is deployed to Flink's classpath to ensure it is available at runtime for discovery.
-->
                    <exclude>com/datasqrl/function/AutoRegisterSystemFunction.class</exclude>
                    <!-- Do not copy the signatures in the META-INF folder.
                  Otherwise, this might cause SecurityExceptions when using the JAR. -->
                    <exclude>META-INF/*.SF</exclude>
                    <exclude>META-INF/*.DSA</exclude>
                    <exclude>META-INF/*.RSA</exclude>
                  </excludes>
                </filter>
              </filters>
              <transformers>
                <transformer implementation="org.apache.maven.plugins.shade.resource.ServicesResourceTransformer"></transformer>
                <transformer implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer">
                  <mainClass>com.datasqrl.FlinkMain</mainClass>
                </transformer>
              </transformers>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <plugin>
        <groupId>com.marvinformatics.jacoco</groupId>
        <artifactId>easy-jacoco-maven-plugin</artifactId>
        <executions>
          <execution>
            <id>instrument-uber-jar</id>
            <goals>
              <goal>instrument-jar</goal>
            </goals>
            <configuration>
              <source>${project.build.directory}/flink-sql-runner.uber.jar</source>
              <destination>${project.build.directory}/flink-sql-runner.jacoco.jar</destination>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>exec-maven-plugin</artifactId>
        <version>${exec.plugin.version}</version>
        <executions>
          <execution>
            <id>build-docker-image</id>
            <goals>
              <goal>exec</goal>
            </goals>
            <phase>package</phase>
            <configuration>
              <workingDirectory>${project.basedir}/target/</workingDirectory>
              <executable>docker</executable>
              <skip>${skipTests}</skip>
              <arguments>
                <argument>build</argument>
                <argument>--tag</argument>
                <argument>flink-sql-runner</argument>
                <argument>.</argument>
              </arguments>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <plugin>
        <groupId>com.marvinformatics</groupId>
        <artifactId>docker-compose-maven-plugin</artifactId>
        <version>${docker-compose-plugin.version}</version>
        <configuration>
          <skip>${skipTests}</skip>
          <composeFile>${project.basedir}/target/docker-compose.yml</composeFile>
        </configuration>
        <executions>
          <execution>
            <id>down-before-execution</id>
            <goals>
              <goal>down</goal>
            </goals>
            <phase>pre-integration-test</phase>
            <configuration>
              <removeVolumes>true</removeVolumes>
            </configuration>
          </execution>
          <execution>
            <id>up</id>
            <goals>
              <goal>up</goal>
            </goals>
            <phase>pre-integration-test</phase>
            <configuration>
              <detachedMode>true</detachedMode>
            </configuration>
          </execution>
          <execution>
            <id>down</id>
            <goals>
              <goal>down</goal>
            </goals>
            <phase>verify</phase>
            <configuration>
              <removeVolumes>true</removeVolumes>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <!-- Copying UDF/SystemFunction JARs -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-dependency-plugin</artifactId>
        <version>3.8.1</version>
        <executions>
          <execution>
            <id>copy-udf-sample-deps</id>
            <goals>
              <goal>copy-dependencies</goal>
            </goals>
            <phase>process-test-classes</phase>
            <configuration>
              <includeGroupIds>com.datasqrl.flinkrunner</includeGroupIds>
              <includeArtifactIds>udf-sample</includeArtifactIds>
              <outputDirectory>${project.build.testOutputDirectory}/udfs</outputDirectory>
            </configuration>
          </execution>
          <execution>
            <id>copy-system-functions-deps</id>
            <goals>
              <goal>copy-dependencies</goal>
            </goals>
            <phase>process-test-classes</phase>
            <configuration>
              <includeGroupIds>com.datasqrl.flinkrunner</includeGroupIds>
              <includeArtifactIds>system-functions-sample</includeArtifactIds>
              <outputDirectory>${project.build.testOutputDirectory}/systemfunction</outputDirectory>
            </configuration>
          </execution>
          <execution>
            <id>copy-functions-common</id>
            <goals>
              <goal>copy-dependencies</goal>
            </goals>
            <phase>process-resources</phase>
            <configuration>
              <includeGroupIds>com.datasqrl.flinkrunner</includeGroupIds>
              <includeArtifactIds>functions-common</includeArtifactIds>
              <outputDirectory>${project.build.directory}</outputDirectory>
            </configuration>
          </execution>
          <execution>
            <id>copy-jacoco-cli</id>
            <goals>
              <goal>copy-dependencies</goal>
            </goals>
            <phase>process-resources</phase>
            <configuration>
              <includeArtifactIds>org.jacoco.agent</includeArtifactIds>
              <outputDirectory>${project.build.directory}</outputDirectory>
            </configuration>
          </execution>
        </executions>
      </plugin>
    </plugins>
  </build>

  <profiles>
    <profile>
      <id>ci</id>
      <build>
        <plugins>
          <plugin>
            <groupId>org.codehaus.mojo</groupId>
            <artifactId>exec-maven-plugin</artifactId>
            <version>${exec.plugin.version}</version>
            <executions>
              <execution>
                <goals>
                  <goal>exec</goal>
                </goals>
                <phase>post-integration-test</phase>
                <configuration>
                  <!-- print logs from docker, helpful when troubleshooting -->
                  <executable>docker</executable>
                  <skip>${skipTests}</skip>
                  <arguments>
                    <argument>logs</argument>
                    <argument>flink-sql-runner-jobmanager-1</argument>
                  </arguments>
                </configuration>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>
  </profiles>
</project>
